// <auto-generated />
using System;
using Assignment_1___COMP2139.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Assignment_1___COMP2139.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Assignment_1___COMP2139.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Live music performances",
                            Name = "Concerts"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Sporting events and games",
                            Name = "Sports"
                        });
                });

            modelBuilder.Entity("Assignment_1___COMP2139.Models.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AvailableTickets")
                        .HasColumnType("integer");

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal>("TicketPrice")
                        .HasColumnType("numeric");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AvailableTickets = 50,
                            CategoryId = 1,
                            Date = new DateTime(2025, 10, 24, 19, 58, 40, 928, DateTimeKind.Utc).AddTicks(6556),
                            Location = "London, UK",
                            TicketPrice = 150.00m,
                            Title = "Adele Live"
                        },
                        new
                        {
                            Id = 2,
                            AvailableTickets = 100,
                            CategoryId = 1,
                            Date = new DateTime(2025, 10, 29, 19, 58, 40, 928, DateTimeKind.Utc).AddTicks(6563),
                            Location = "Toronto, Canada",
                            TicketPrice = 120.00m,
                            Title = "The Weeknd World Tour"
                        },
                        new
                        {
                            Id = 3,
                            AvailableTickets = 200,
                            CategoryId = 1,
                            Date = new DateTime(2025, 11, 3, 19, 58, 40, 928, DateTimeKind.Utc).AddTicks(6565),
                            Location = "Paris, France",
                            TicketPrice = 110.00m,
                            Title = "Coldplay Stadium Show"
                        },
                        new
                        {
                            Id = 4,
                            AvailableTickets = 75,
                            CategoryId = 1,
                            Date = new DateTime(2025, 11, 8, 19, 58, 40, 928, DateTimeKind.Utc).AddTicks(6566),
                            Location = "New York, USA",
                            TicketPrice = 250.00m,
                            Title = "Taylor Swift: The Eras Tour"
                        },
                        new
                        {
                            Id = 5,
                            AvailableTickets = 150,
                            CategoryId = 1,
                            Date = new DateTime(2025, 11, 13, 19, 58, 40, 928, DateTimeKind.Utc).AddTicks(6568),
                            Location = "Seoul, South Korea",
                            TicketPrice = 180.00m,
                            Title = "BTS Reunion"
                        },
                        new
                        {
                            Id = 6,
                            AvailableTickets = 120,
                            CategoryId = 1,
                            Date = new DateTime(2025, 11, 18, 19, 58, 40, 928, DateTimeKind.Utc).AddTicks(6569),
                            Location = "Dublin, Ireland",
                            TicketPrice = 95.00m,
                            Title = "Ed Sheeran Acoustic Night"
                        },
                        new
                        {
                            Id = 7,
                            AvailableTickets = 200,
                            CategoryId = 2,
                            Date = new DateTime(2025, 11, 23, 19, 58, 40, 928, DateTimeKind.Utc).AddTicks(6570),
                            Location = "Berlin, Germany",
                            TicketPrice = 300.00m,
                            Title = "Champions League Final"
                        },
                        new
                        {
                            Id = 8,
                            AvailableTickets = 180,
                            CategoryId = 2,
                            Date = new DateTime(2025, 11, 28, 19, 58, 40, 928, DateTimeKind.Utc).AddTicks(6572),
                            Location = "Los Angeles, USA",
                            TicketPrice = 350.00m,
                            Title = "NBA All-Star Game"
                        },
                        new
                        {
                            Id = 9,
                            AvailableTickets = 80,
                            CategoryId = 2,
                            Date = new DateTime(2025, 12, 3, 19, 58, 40, 928, DateTimeKind.Utc).AddTicks(6573),
                            Location = "London, UK",
                            TicketPrice = 220.00m,
                            Title = "Wimbledon Finals"
                        },
                        new
                        {
                            Id = 10,
                            AvailableTickets = 300,
                            CategoryId = 2,
                            Date = new DateTime(2025, 12, 8, 19, 58, 40, 928, DateTimeKind.Utc).AddTicks(6575),
                            Location = "Las Vegas, USA",
                            TicketPrice = 500.00m,
                            Title = "Super Bowl LX"
                        },
                        new
                        {
                            Id = 11,
                            AvailableTickets = 250,
                            CategoryId = 2,
                            Date = new DateTime(2025, 12, 13, 19, 58, 40, 928, DateTimeKind.Utc).AddTicks(6576),
                            Location = "Monaco",
                            TicketPrice = 400.00m,
                            Title = "Formula 1 Grand Prix"
                        },
                        new
                        {
                            Id = 12,
                            AvailableTickets = 500,
                            CategoryId = 2,
                            Date = new DateTime(2025, 12, 18, 19, 58, 40, 928, DateTimeKind.Utc).AddTicks(6577),
                            Location = "Tokyo, Japan",
                            TicketPrice = 450.00m,
                            Title = "Olympics Opening Ceremony"
                        });
                });

            modelBuilder.Entity("Assignment_1___COMP2139.Models.Purchase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("GuestEmail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("GuestName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("PurchaseDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Purchases");
                });

            modelBuilder.Entity("Assignment_1___COMP2139.Models.PurchaseEvent", b =>
                {
                    b.Property<int>("PurchaseId")
                        .HasColumnType("integer");

                    b.Property<int>("EventId")
                        .HasColumnType("integer");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.HasKey("PurchaseId", "EventId");

                    b.HasIndex("EventId");

                    b.ToTable("PurchaseEvents");
                });

            modelBuilder.Entity("Assignment_1___COMP2139.Models.Event", b =>
                {
                    b.HasOne("Assignment_1___COMP2139.Models.Category", "Category")
                        .WithMany("Events")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Assignment_1___COMP2139.Models.PurchaseEvent", b =>
                {
                    b.HasOne("Assignment_1___COMP2139.Models.Event", "Event")
                        .WithMany("PurchaseEvents")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Assignment_1___COMP2139.Models.Purchase", "Purchase")
                        .WithMany("PurchaseEvents")
                        .HasForeignKey("PurchaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("Purchase");
                });

            modelBuilder.Entity("Assignment_1___COMP2139.Models.Category", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("Assignment_1___COMP2139.Models.Event", b =>
                {
                    b.Navigation("PurchaseEvents");
                });

            modelBuilder.Entity("Assignment_1___COMP2139.Models.Purchase", b =>
                {
                    b.Navigation("PurchaseEvents");
                });
#pragma warning restore 612, 618
        }
    }
}
