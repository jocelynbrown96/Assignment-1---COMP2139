// <auto-generated />
using System;
using Assignment_1___COMP2139.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Assignment_1___COMP2139.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20251010164051_UpdateAdeleTickets")]
    partial class UpdateAdeleTickets
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Assignment_1___COMP2139.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Live music performances",
                            Name = "Concerts"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Sporting events and games",
                            Name = "Sports"
                        });
                });

            modelBuilder.Entity("Assignment_1___COMP2139.Models.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AvailableTickets")
                        .HasColumnType("integer");

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("TicketPrice")
                        .HasColumnType("numeric");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AvailableTickets = 500,
                            CategoryId = 1,
                            Date = new DateTime(2025, 10, 20, 16, 40, 51, 28, DateTimeKind.Utc).AddTicks(7072),
                            TicketPrice = 150.00m,
                            Title = "Taylor Swift: The Eras Tour"
                        },
                        new
                        {
                            Id = 2,
                            AvailableTickets = 400,
                            CategoryId = 1,
                            Date = new DateTime(2025, 10, 30, 16, 40, 51, 28, DateTimeKind.Utc).AddTicks(7078),
                            TicketPrice = 120.00m,
                            Title = "Coldplay: Music of the Spheres"
                        },
                        new
                        {
                            Id = 3,
                            AvailableTickets = 300,
                            CategoryId = 1,
                            Date = new DateTime(2025, 11, 9, 16, 40, 51, 28, DateTimeKind.Utc).AddTicks(7080),
                            TicketPrice = 110.00m,
                            Title = "Billie Eilish Live"
                        },
                        new
                        {
                            Id = 4,
                            AvailableTickets = 350,
                            CategoryId = 1,
                            Date = new DateTime(2025, 11, 19, 16, 40, 51, 28, DateTimeKind.Utc).AddTicks(7081),
                            TicketPrice = 100.00m,
                            Title = "Bruno Mars Night"
                        },
                        new
                        {
                            Id = 5,
                            AvailableTickets = 4,
                            CategoryId = 1,
                            Date = new DateTime(2025, 11, 29, 16, 40, 51, 28, DateTimeKind.Utc).AddTicks(7083),
                            TicketPrice = 200.00m,
                            Title = "Adele: One Night Only"
                        },
                        new
                        {
                            Id = 6,
                            AvailableTickets = 450,
                            CategoryId = 1,
                            Date = new DateTime(2025, 12, 9, 16, 40, 51, 28, DateTimeKind.Utc).AddTicks(7084),
                            TicketPrice = 130.00m,
                            Title = "Ed Sheeran: Mathematics Tour"
                        },
                        new
                        {
                            Id = 7,
                            AvailableTickets = 1000,
                            CategoryId = 2,
                            Date = new DateTime(2025, 10, 25, 16, 40, 51, 28, DateTimeKind.Utc).AddTicks(7085),
                            TicketPrice = 90.00m,
                            Title = "NBA Finals Game 1"
                        },
                        new
                        {
                            Id = 8,
                            AvailableTickets = 2000,
                            CategoryId = 2,
                            Date = new DateTime(2025, 11, 4, 16, 40, 51, 28, DateTimeKind.Utc).AddTicks(7086),
                            TicketPrice = 250.00m,
                            Title = "Super Bowl LVIII"
                        },
                        new
                        {
                            Id = 9,
                            AvailableTickets = 1500,
                            CategoryId = 2,
                            Date = new DateTime(2025, 11, 14, 16, 40, 51, 28, DateTimeKind.Utc).AddTicks(7087),
                            TicketPrice = 75.00m,
                            Title = "World Cup Qualifier"
                        },
                        new
                        {
                            Id = 10,
                            AvailableTickets = 1200,
                            CategoryId = 2,
                            Date = new DateTime(2025, 11, 24, 16, 40, 51, 28, DateTimeKind.Utc).AddTicks(7089),
                            TicketPrice = 95.00m,
                            Title = "Stanley Cup Final"
                        },
                        new
                        {
                            Id = 11,
                            AvailableTickets = 500,
                            CategoryId = 2,
                            Date = new DateTime(2025, 12, 4, 16, 40, 51, 28, DateTimeKind.Utc).AddTicks(7090),
                            TicketPrice = 180.00m,
                            Title = "Wimbledon Finals"
                        },
                        new
                        {
                            Id = 12,
                            AvailableTickets = 800,
                            CategoryId = 2,
                            Date = new DateTime(2025, 12, 14, 16, 40, 51, 28, DateTimeKind.Utc).AddTicks(7091),
                            TicketPrice = 160.00m,
                            Title = "Olympic Track Finals"
                        });
                });

            modelBuilder.Entity("Assignment_1___COMP2139.Models.Purchase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("GuestEmail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("GuestName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("PurchaseDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("TotalCost")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.ToTable("Purchases");
                });

            modelBuilder.Entity("Assignment_1___COMP2139.Models.PurchaseEvent", b =>
                {
                    b.Property<int>("PurchaseId")
                        .HasColumnType("integer");

                    b.Property<int>("EventId")
                        .HasColumnType("integer");

                    b.HasKey("PurchaseId", "EventId");

                    b.HasIndex("EventId");

                    b.ToTable("PurchaseEvents");
                });

            modelBuilder.Entity("Assignment_1___COMP2139.Models.Event", b =>
                {
                    b.HasOne("Assignment_1___COMP2139.Models.Category", "Category")
                        .WithMany("Events")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Assignment_1___COMP2139.Models.PurchaseEvent", b =>
                {
                    b.HasOne("Assignment_1___COMP2139.Models.Event", "Event")
                        .WithMany("PurchaseEvents")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Assignment_1___COMP2139.Models.Purchase", "Purchase")
                        .WithMany("PurchaseEvents")
                        .HasForeignKey("PurchaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("Purchase");
                });

            modelBuilder.Entity("Assignment_1___COMP2139.Models.Category", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("Assignment_1___COMP2139.Models.Event", b =>
                {
                    b.Navigation("PurchaseEvents");
                });

            modelBuilder.Entity("Assignment_1___COMP2139.Models.Purchase", b =>
                {
                    b.Navigation("PurchaseEvents");
                });
#pragma warning restore 612, 618
        }
    }
}
